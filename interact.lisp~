(defun path ()
    "C:\\Users\\Warfe\\OneDrive\\Documentos\\GitHub\\IA-pt-2"
)

(defun path-log ()
    "C:\\Users\\Warfe\\OneDrive\\Documentos\\Github\\IA-pt-2\\logs\log.dat"
)

(load (compile-file (concatenate 'string (path) "/jogo.lisp")))
(load (compile-file (concatenate 'string (path) "/algoritmo.lisp")))


(defun menu-inicial ()
  (format t "~% --------------------------------------------------------- ")
  (format t "~%|              Quatro - Escolha uma opcao                 |")
  (format t "~%|                                                         |")
  (format t "~%|                1 -  Humano vs Computador                |")
  (format t "~%|                2 - Computador vs Computador             |")
  (format t "~%|                3 - Sair                                 |")
  (format t "~%|                                                         |")
  (format t "~% ---------------------------------------------------------~%~%> ")
)

(defun menu-primeiro-jogador ()
    (format t "~%-------------------------------------------")
    (format t "~%|       Qual jogador vai primeiro?        |")
    (format t "~%|                -1 - Jogador             |")
    (format t "~%|                 1 - Computador          |")
    (format t "~%-------------------------------------------~%~%")
)

(defun menu-profundidade-algoritmo ()
    (format t "~%-------------------------------------------------------------------------------")
    (format t "~%|         Escolha a profundidade que o algoritmo deva usar como maximo        |")
    (format t "~%-------------------------------------------------------------------------------~%~%")
)

(defun menu-tempo-algoritmo ()
    (format t "~%-------------------------------------------------------------------------------")
    (format t "~%|         Escolha o tempo limite que o algoritmo deva usar como maximo        |")
    (format t "~%|             Escolha um numero entre estes valores [1000 , 5000]             |")
    (format t "~%-------------------------------------------------------------------------------~%~%")
)

(defun menu-fazer-jogada (tabuleiro posicoes)
  (let ((tabuleiro (escreve-tabuleiro tabuleiro)))
    (format t "jogadas possiveis: ~a" posicoes)
    (let* ((linha-format (format t "insira a linha prentendida"))
           (linha (read ))
           (coluna-format (format t "insira a coluna prentendida"))
           (coluna (read))
           (peca-format (format t "escolha a peca que quere-ra por no tabuleiro (1 - ~a)" (length (reserva tabuleiro))))
           (peca (read))
           )
      (list linha coluna (nth peca (reserva tabuleiro)))
      )
    )
)

(defun mostrar-lista (lista)
    (cond 
        ((null lista) nil)
        (t (format t "~a~%" (car lista)))
    )
)

(defun jogar ()
    (let* ((menu (menu-inicial))
            (opcao (read))
        )
        (cond 
            ((eq opcao 1) (let* ((jogador-inicial (escolher-jogador))
                                 (tempo-algoritmo (escolher-tempo-algoritmo))
                                 (novo-no (criar-no (tabuleiro-jogo)))
                                )
                    (cond 
                        ((= jogador-inicial -1) (jogar-jogadores novo-no jogador-inicial tempo-algoritmo (escolher-profundidade)))
                        (t (jogar-jogadores novo-no jogador-inicial tempo-algoritmo))
                    )
                ))
        )
    
    )
)

(defun escolher-jogador ()
    (let* ((menu (menu-primeiro-jogador))
            (opcao (read))        
        )
        (cond 
            ((eq opcao 1) -1)
            ((eq opcao 2) 1)
            (t (format t "~%Introduza uma opcao valida") (escolher-jogador))
        )

    )
)

(defun escolher-profundidade ()
    (let* ((menu (menu-profundidade-algoritmo))
            (profundidade (read ))
            )
        (cond 
            ((> profundidade 0) profundidade)
            (t (format t "Profundiade invalida") (escolher-profundidade))
        )
    )
)

(defun jogar-jogadores (no jogador tempo &optional (profundidade 16))
  (escreve-tabuleiro (no-estado no))
  (cond
    ((venceup (tabuleiro (no-estado no))) (format t "O jogador ~a ganhou!!!!!!!!!") (if (= jogador 1) -1 1))  ;;Este if serve para ver se o outro jogador ganho na sua jogada anterior
    ((tabuleiro-preenchidop (tabuleiro (no-estado no))) (format t "Empate!!!!!"))
    ((= jogador -1)(let* ((fazer-jogada (menu-fazer-jogada))
                            (no-jogada (criar-no (operador (first fazer-jogada) (second fazer-jogada) (third fazer-jogada) (tabuleiro (no-estado no)))))
                        )
                        (jogar-jogadores no-jogada (- jogador) tempo)
    ))    
    (t (let* ((jogada-computador (negamax no tempo 1 profundidade)))
             (escrever-no jogada-computador (path-log))
        )
            (jogar-jogadores no-jogada (- jogador) tempo)
    )
 )
)

(defun escolher-tempo-algoritmo ()
    (let* ((menu (menu-tempo-algoritmo))
           (tempo-lido (read ))
          )
        (cond
            ((OR (< tempo-lido 1) (> tempo-lido 5)) (format t "Porfavor escolha um valor dentro do intervalo referido") (escolher-tempo-algoritmo))
            (t tempo-lido)
        )
    )
)

(defun escreve-tabuleiro (tabuleiro &optional (ficheiro t))
  (cond 
   ((null tabuleiro) (format ficheiro "~%"))
   (t (format ficheiro "~%| ~a |" (car tabuleiro)) (escreve-tabuleiro (cdr tabuleiro) ficheiro))
   )
  )

(defun escrever-no (no-solucao &optional stream)
    (let* ((no (obter-jogada-solucao no-solucao))
           (expandidos (obter-expandidos no-solucao))
           (cortes (obter-nr-cortes no-solucao))
           (tempo-gasto (obter-tempo-gasto-solucao no-solucao))
          )
        (with-open-file (file (path-log) :direction :output :if-exists :append :if-does-not-exist :create)
            (format stream "~%-----------------------Jogada--------------------------~%")
            (escreve-tabuleiro (tabuleiro (no-estado no)) stream)
            (format stream "~%     Nr de nos expandidos: ~a     Nr de cortes: ~a" expandidos cortes)
            (format stream "                      tempo gasto na jogada: ~a" tempo-gasto)
        )
    )
)

