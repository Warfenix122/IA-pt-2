(defun path ()
    "C:\\Users\\Warfe\\OneDrive\\Documentos\\GitHub\\IA-pt-2"
)

(defun path-log ()
    "C:\\Users\\Warfe\\OneDrive\\Documentos\\GitHub\\IA-pt-2\\log.dat"
)

(load (compile-file (concatenate 'string (path) "/jogo.lisp")))
(load (compile-file (concatenate 'string (path) "/algoritmo.lisp")))


(defun menu-inicial ()
  (format t "~% --------------------------------------------------------- ")
  (format t "~%|              Quatro - Escolha uma opcao                 |")
  (format t "~%|                                                         |")
  (format t "~%|                1 -  Humano vs Computador                |")
  (format t "~%|                2 - Computador vs Computador             |")
  (format t "~%|                3 - Sair                                 |")
  (format t "~%|                                                         |")
  (format t "~% ---------------------------------------------------------~%~%> ")
)

(defun menu-primeiro-jogador ()
    (format t "~%-------------------------------------------")
    (format t "~%|       Qual jogador vai primeiro?        |")
    (format t "~%|                -1 - Jogador             |")
    (format t "~%|                 1 - Computador          |")
    (format t "~%-------------------------------------------~%~%")
)

(defun menu-profundidade-algoritmo ()
    (format t "~%-------------------------------------------------------------------------------")
    (format t "~%|         Escolha a profundidade que o algoritmo deva usar como maximo        |")
    (format t "~%-------------------------------------------------------------------------------~%~%")
)

(defun menu-tempo-algoritmo ()
    (format t "~%-------------------------------------------------------------------------------")
    (format t "~%|         Escolha o tempo limite que o algoritmo deva usar como maximo        |")
    (format t "~%|             Escolha um numero entre estes valores [1000 , 5000]             |")
    (format t "~%-------------------------------------------------------------------------------~%~%")
)

(defun menu-fazer-jogada (jogo)
  ;(let ((posicoes (retornar-espacos-vazios jogo)))
    ;(format t "~%jogadas possiveis: ~a~%" posicoes)
    (let* ((linha-format (format t "~%insira a linha prentendida~%"))
           (linha (read ))
           (coluna-format (format t "~%insira a coluna prentendida~%"))
           (coluna (read))
           (escrever-reserva (escreve-tabuleiro (remove 0 (reserva jogo))))
           (peca-format (format t "~%escolha a peca que quere-ra por no tabuleiro (1 - ~a) ~%" (length (reserva jogo))))
           (peca (read))
           )
      (list linha coluna (nth peca (remove 0(reserva jogo))))
      )
   ; )
)

(defun mostrar-lista (lista)
    (cond 
        ((null lista) nil)
        (t (format t "~a~%" (car lista)))
    )
)

(defun jogar ()
  (let* ((menu (menu-inicial))
         (opcao (read))
         )
    (cond 
     ((eq opcao 1) (let* ((jogador-inicial (escolher-jogador))
                          (tempo-algoritmo (escolher-tempo-algoritmo))
                          (escrever-tabuleiro (no-estado (no-inicial)))
                          )
                     (cond 
                      ((= jogador-inicial -1) (jogada-humano (no-inicial) tempo-algoritmo (escolher-profundidade)))
                      (t (jogada-computador (no-inicial) tempo-algoritmo))
                      )
                     )
      )
     ((eq opcao 2) (let* ((tempo-algoritmo (escolher-tempo-algoritmo))
                          (novo-no (criar-no (tabuleiro-jogo)))
                          )
                     (jogada-computador novo-no tempo-algoritmo 16 2 1)
                     )
      )
     )
    )
  )

(defun escolher-jogador ()
    (let* ((menu (menu-primeiro-jogador))
            (opcao (read))        
        )
        (cond 
            ((eq opcao -1) -1)
            ((eq opcao 1) 1)
            (t (format t "~%Introduza uma opcao valida") (escolher-jogador))
        )
    )
)

(defun escolher-profundidade ()
    (let* ((menu (menu-profundidade-algoritmo))
            (profundidade (read ))
            )
        (cond 
            ((> profundidade 0) profundidade)
            (t (format t "Profundiade invalida") (escolher-profundidade))
        )
    )
)

(defun jogada-humano (no tempo &optional (profundidade 16))
  (let* ((fazer-jogada (menu-fazer-jogada (no-estado no)))
         (novo-no (criar-no (operador (first fazer-jogada) (second fazer-jogada) (third fazer-jogada) (no-estado no))))
         (escrever-tabuleiro (escreve-tabuleiro (tabuleiro (no-estado novo-no))))
         (venceu (venceup (tabuleiro (no-estado no))))
         )
    (cond
     (venceu (format t "O jogador Humano ganhou!"))
     ((tabuleiro-preenchidop (tabuleiro (no-estado no))) (format t "Empate!!!"))
     (t (jogada-computador novo-no tempo profundidade))
     )
    )
  )

(defun jogada-computador (no tempo &optional (profundidade 16) (modo 1) (nr-jogador 1))
  (let* ((jogada-computador (negamax no (/ tempo 1000) nr-jogador profundidade))
         (no-jogada (obter-jogada-solucao jogada-computador))
         (nos-expandidos (obter-expandidos jogada-computador))
         (nos-cortados (obter-nr-cortes jogada-computador))
         (venceu (venceup (tabuleiro (no-estado no-jogada))))
         (escrever-listener (escrever-no-listener jogada-computador))
         (escrever-ficheiro (escrever-no-ficheiro jogada-computador))
         )
    (cond
     (venceu (format t "~%O computador ~a venceu~%" nr-jogador))
     ((tabuleiro-preenchidop (tabuleiro (no-estado no-jogada))) (format t "~%Empate!!!~%"))
     ((= modo 1) (jogada-humano no-jogada tempo profundidade))
     (t (jogada-computador no-jogada tempo profundidade modo nr-jogador))
     )
    )
  )

(defun escolher-tempo-algoritmo ()
    (let* ((menu (menu-tempo-algoritmo))
           (tempo-lido (read ))
          )
        (cond
            ((OR (< tempo-lido 1000) (> tempo-lido 5000)) (format t "Porfavor escolha um valor dentro do intervalo referido") (escolher-tempo-algoritmo))
            (t tempo-lido)
        )
    )
)

(defun escreve-tabuleiro (tabuleiro &optional (ficheiro t))
  (cond 
   ((null tabuleiro) (format ficheiro "~%"))
   (t (format ficheiro "~%| ~a |" (car tabuleiro)) (escreve-tabuleiro (cdr tabuleiro) ficheiro))
   )
  )

(defun escrever-no-listener (no-solucao)
  (let* ((no (obter-jogada-solucao no-solucao))
         (expandidos (obter-expandidos no-solucao))
         (cortes (obter-nr-cortes no-solucao))
         (tempo-gasto (obter-tempo-gasto-solucao no-solucao))
         )
    (escrever-estatisticas t (no-estado no) expandidos cortes tempo-gasto)
    )
  )

(defun escrever-no-ficheiro (no-solucao)
  (let* ((no (obter-jogada-solucao no-solucao))
         (expandidos (obter-expandidos no-solucao))
         (cortes (obter-nr-cortes no-solucao))
         (tempo-gasto (obter-tempo-gasto-solucao no-solucao))
         )
    (with-open-file (file (path-log) :direction :output :if-exists :append :if-does-not-exist :create)
      (escrever-estatisticas file (no-estado no) expandidos cortes tempo-gasto )
      )
    )
  )

(defun escrever-estatisticas (stream estado expandidos cortes tempo-gasto)
  (format stream "~%-----------------------------jogada----------------------------------------------------------------------------")
  (escreve-tabuleiro (tabuleiro estado))
  (format stream "~%                  Nr de nos expandidos: ~a     Nr de cortes: ~a" expandidos cortes)
  (format stream "~%                        Tempo gasto na jogada:~a" tempo-gasto)
  (format stream "~%---------------------------------------------------------------------------------------------------------------")
)
